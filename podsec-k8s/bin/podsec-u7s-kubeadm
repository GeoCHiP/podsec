#!/bin/sh
source podsec-u7s-functions


format() {
  echo -ne "Формат:\n$0 [-v [0-9]] [init|join] [<join-параметр> ...]" >&2
}

debugLevel=0
if [ ${1} = '-v' ]
then
  if [ $# -lt 2 ]
  then
    echo "Неверное число параметров"
    format
  fi
  debugLevel=$2
  if [ $n -ge 0 -a $n -lt 10 ] 2>/dev/null
  then
    echo "Неверный уровень отладки"
    format
  fi
  shift;shift
fi

if [ $# -eq 0 ]
then
  echo "Неверное число параметров"
  format
fi

cmd=$1

if [ "$cmd" != 'init' -a "$cmd" != 'join' ]
then
  echo -ne "Неверная команда $cmd" >&2
  format
  exit 1
fi

shift
controlPlane=
token=
caCertHash=
case $cmd in
  init)
    if [ "$#" -gt 0 ]
    then
      echo -ne "Лишние параметры $*\nФормат вызова: \n$0 init\n";
      exit
    fi
    controlPlane="initMaster"
    ;;
  join)
    if [ $# -eq 0 ]
    then
      echo -ne "Отсутствуют параметры\nФормат вызова: \n$0 init|join <параметры>\n";
      exit 1
    fi
    apiServer=$1
    shift
    while [ $# -gt 0 ]
    do
      par=$1
      if [ "${par:0:2}" != '--' ]
      then
        echo "Отсутствуют '--' у параметра $par в параметрах $**"
        exit 1
      fi
      par=${par:2}
      case $par in
        'control-plane')
          controlPlane="master"
          shift
          ;;
        'token')
          token=$2
          shift;shift
          ;;
        'discovery-token-ca-cert-hash')
          caCertHash=$2
          shift;shift
          ;;
        *)
          echo "Неизвестный параметр $par";
          exit 1
          ;;
      esac
    done
    if [ -z "$token" ]
    then
      echo "В операции join отсутствуют флаг token";
      exit 1
    fi
    if [ -z "$caCertHash" ]
    then
      echo "В операции join отсутствуют флаг discovery-token-ca-cert-hash";
      exit 1
    fi
    ;;
  *)
    echo -ne "Формат вызова: \n$0 init|join <параметры>\n";
    exit 1;
esac

uid=`id -u u7s-admin`
extIP=$(getExtIP)
extDev=$(getExtDev $extIP)

if [ "$controlPlane" = 'initMaster' ]
then
  tapIP=10.96.0.1
else
  tapIP=$(getStaticClusterIP $extIP)
fi


# cp ~u7s-admin/.config/usernetes/ENV ~u7s-admin/.config/usernetes/env
envDir="$XDG_CONFIG_HOME=/var/lib/u7s-admin/.config/usernetes"
cp /etc/podsec/u7s/config/ENV /etc/podsec/u7s/config/env
echo  "
U7S_UID=$uid
U7S_EXTIP=$extIP
U7S_EXTDEV=$extDev
U7S_TAPIP=$tapIP
U7S_DEBUGLEVEL=$debugLevel
U7S_CONTROLPLANE=$controlPlane
U7S_APISERVER=$apiServer
U7S_TOKEN=$token
U7S_CACERTHASH=$caCertHash" >> /etc/podsec/u7s/config/env


###############################
# Данные команды будут удалены после установки соответсвующих прав в пакетах в пакете kubernetes-common-1.26.3-alt2

# kubernetes-common
chmod 775 /etc/kubernetes
chgrp kube /etc/kubernetes

# kubernetes-kubelet
chmod 775 /etc/kubernetes/manifests/
chgrp kube /etc/kubernetes/manifests/
###############################

cp /etc/podsec/u7s/config/modules-load.d/usernetes.conf /etc/modules-load.d/u7s.conf
# echo -ne    "tun
# tap
# bridge
# br_netfilter
# veth
# ip6_tables
# iptable_nat
# ip6table_nat
# iptable_filter
# ip6table_filter
# nf_tables
# xt_MASQUERADE
# xt_addrtype
# xt_comment
# xt_conntrack
# xt_mark
# xt_multiport
# xt_nat
# xt_tcpudp
# " > /etc/modules-load.d/u7s.conf
modprobe -a $(cat /etc/modules-load.d/u7s.conf)

if ! /bin/grep u7s-admin /etc/subuid
then
  # Сформровать /etc/subuid, /etc/subgid для системного user путем временного создания обчного пользователя
  /usr/sbin/useradd -M u7s_admin_temp
  /bin/sed -e 's/u7s_admin_temp/u7s-admin/' -i /etc/subuid
  /bin/sed -e 's/u7s_admin_temp/u7s-admin/' -i /etc/subgid
  /usr/sbin/userdel u7s_admin_temp
fi

mkdir -p /var/lib/crio/

# Чистим предыдещий конфиг kuber
rm -f /etc/kubernetes/*.conf \
  /etc/kubernetes/manifests/*.yaml \
  /etc/kubernetes/pki/*.??? \
  /etc/kubernetes/pki/etcd/*.??? 2>/dev/null

if ! machinectl shell u7s-admin@ /bin/sh -x /usr/libexec/podsec/u7s/bin/kubeadm.sh $cmd
then
  echo "Разворачивание кластера закончилось неудачно.
  Посмотрите в пользователе u7s-admin статус командой 'systemctl --user u7s.target' и системные логи командами journalctl"
  patree -pal
  exit 1
fi

machinectl shell u7s-admin@ /sbin/systemctl --user enable u7s.target
machinectl shell u7s-admin@ /sbin/systemctl --user start u7s.target
/sbin/systemctl enable  u7s.service
/sbin/systemctl start u7s.service

if [ -z "$controlPlane" ] # WORKER node
then
  exit 0
fi

adminConf="/etc/kubernetes/admin.conf"

if [ ! -s $tmpConf ]
then
  echo "Конфигурацонный файл администратора кластера не сформирован!"
  exit 2
fi

mkdir -p /root/.kube/
cp -f $adminConf /root/.kube/config
chmod 600 /root/.kube/config
chmod 700 /root/.kube/

mkdir -p ~u7s-admin/.kube/
cp -f $adminConf ~u7s-admin/.kube/config
chmod 600 ~u7s-admin/.kube/config
chmod 700 ~u7s-admin/.kube/
chown -R u7s-admin:u7s-admin ~u7s-admin/.kube



