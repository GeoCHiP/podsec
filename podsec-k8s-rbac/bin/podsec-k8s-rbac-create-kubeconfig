#!/bin/sh

cmdname=$0
if [ $# -lt 2 ]
then
  echo "Формат вызова: $0 <пользователь> <группа1> ..."
  exit 1
fi
user=$1
shift
groups=
for group
do
        groups="$groups/O=$group"
done

export USERDIR=/home/$user
export KUBECONFIGDIR=$USERDIR/.kube
cd $KUBECONFIGDIR

# Создание личного (private) ключа
echo -ne "Создании личного (private) ключа..."
openssl genrsa -out $user.key 2048
echo

# Создание запроса на подпись сертификата (CSR)
echo -ne "Создание запроса на подпись сертификата (CSR)..."
openssl req -new -key $user.key -out $user.csr -subj "/CN=$user$groups"

echo

request=$(base64 < $user.csr | tr -d "\n")
# Запись CSR в кластер
echo -ne "Запись CSR в кластер..."
cat <<EOF | kubectl apply -f -
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: $user
spec:
  request: $request
  signerName: kubernetes.io/kube-apiserver-client
  expirationSeconds: 157680000  # 5 years
  usages:
  - client auth
EOF
echo

# Подтверждение CSR
echo -ne "Подтверждение CSR..."
kubectl certificate approve $user

# Создание сертификата
echo "Создание сертификата..."
kubectl get csr $user -o jsonpath='{.status.certificate}'| base64 -d > $user.crt
echo

# Проверка корректности сертификата
echo -ne "Проверка корректности сертификата"
TMPFILE=/tmp/$cmdname.$$
openssl rsa  -noout -modulus -in $user.key | openssl md5 > $TMPFILE
openssl x509 -noout -modulus -in $user.crt | openssl md5 | cmp $TMPFILE
if [ $? -gt 1 ]
then
  echo -ne "\nЛичный ключ пользователя не соответствуют сгенерированному сертификату\n" >&1
  exit 1
fi
rm -f openssl x509 -noout -modulus -in $user.crt | openssl md5 | cmp $TMPFILE
echo

# Формирование файла конфигурации пользователя
echo -ne "Формирование файла конфигурации пользователя..."
clustername=`kubectl config  view -o jsonpath='{.clusters[0].name}'`
clusterapi=`kubectl config  view -o jsonpath='{.clusters[0].cluster.server}'`
kubectl config set-cluster $clustername --certificate-authority=ca.crt --embed-certs=true --server=$clusterapi --kubeconfig=config
kubectl config set-credentials $user --client-certificate=$user.crt --client-key=$user.key --embed-certs=true --kubeconfig=config
kubectl config set-context default --cluster=$clustername --user=$user --kubeconfig=config
kubectl config use-context default --kubeconfig=config
echo
